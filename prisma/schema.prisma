// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_insights {
  insight_id Int
  user_id Int
  generated_on DateTime
  recommendation String
  spec_additional_comment String
  user users? @relation(fields: [user_id], references: [user_id])
  @@id([insight_id])
}

model career_paths {
  career_id Int
  career_title String
  career_desc String
  user_career_paths user_career_paths[]
  @@id([career_id])
}

model certificates {
  cert_id Int
  cert_name String
  cert_provider String
  cert_level String
  cert_category String
  is_added_by_user Boolean @default(false)
  user_certificates user_certificates[]
  recommended_certificate recommended_certificate[]
  study_plan_certificate study_plan_certificate[]
  @@id([cert_id])
}

model community_posts {
  post_id Int
  user_id Int
  posted_on DateTime
  post_content String
  course_rating Int
  user users? @relation("PostAuthor", fields: [user_id], references: [user_id])
  @@id([post_id])
}

model courses {
  course_id Int
  course_code String
  course_name String
  course_desc String
  course_full_desc String
  course_link String?
  ai_tagged_skill String
  user_courses user_courses[]
  recommended_courses recommended_courses[]
  study_plan_courses study_plan_courses[]
  @@id([course_id])
}

model external_courses {
  external_course_id Int
  external_course_name String
  external_provider String
  external_course_desc String
  external_ai_tagged_skill String
  is_added_by_user Boolean @default(false)
  user_external_courses user_external_courses[]
  recommended_external_courses recommended_external_courses[]
  study_plan_external_courses study_plan_external_courses[]
  @@id([external_course_id])
}

model job_description {
  job_id Int
  job_url String
  job_title String
  job_description String
  job_hard_skills String
  job_soft_skills String
  @@id([job_id])
}

model linkedin_benchmark {
  id Int
  skill_name String
  avg_skill_score Float
  percentile_75 Float
  percentile_90 Float
  sample_size Int
  @@id([id])
}

model peer_reviews {
  feedback String
  rating Int
  review_date DateTime
  review_id Int
  reviewer_id Int
  reviewee_id Int
  reviewer users? @relation(name: "PeerReviewsReviewer", fields: [reviewer_id], references: [user_id])
  reviewee users? @relation(name: "PeerReviewsReviewee", fields: [reviewee_id], references: [user_id])
  @@id([review_id])
}

model projects {
  project_id Int
  project_title String
  project_desc String
  difficulty_level String
  estimated_time String
  users users[]
  recommended_projects recommended_projects[]
  study_plan_projects study_plan_projects[]
  @@id([project_id])
}

model skill_competencies {
  skill_id Int
  skill_name String
  skill_grade String
  skill_category String
  user_skill user_skill[]
  @@id([skill_id])
}

model specialization {
  spec_id Int
  spec_name String
  spec_desc String
  users_specialization users_specialization[]
  @@id([spec_id])
}

model study_plan_certificate {
  id Int
  plan_id Int
  cert_id Int
  study_plans study_plans? @relation(fields: [plan_id], references: [plan_id])
  certificate certificates? @relation(fields: [cert_id], references: [cert_id])
  @@id([id])
}

model study_plan_courses {
  id Int
  plan_id Int
  course_id Int
  study_plans study_plans? @relation(fields: [plan_id], references: [plan_id])
  course courses? @relation(fields: [course_id], references: [course_id])
  @@id([id])
}

model study_plan_external_courses {
  id Int
  plan_id Int
  external_course_id Int
  study_plans study_plans? @relation(fields: [plan_id], references: [plan_id])
  external_courses external_courses? @relation(fields: [external_course_id], references: [external_course_id])
  @@id([id])
}

model study_plan_projects {
  plan_id Int
  project_id Int
  id Int
  study_plans study_plans? @relation(fields: [plan_id], references: [plan_id])
  project projects? @relation(fields: [project_id], references: [project_id])
  @@id([plan_id])
}

model study_plans {
  plan_id Int
  user_id Int
  plan_name String
  plan_desc String
  created_at DateTime
  updated_at DateTime
  user users? @relation(fields: [user_id], references: [user_id])
  study_plan_courses study_plan_courses[]
  study_plan_projects study_plan_projects[]
  study_plan_certificate study_plan_certificate[]
  study_plan_external_courses study_plan_external_courses[]
  @@id([plan_id])
}

model user_career_paths {
  user_id Int
  career_id Int
  career_path career_paths? @relation(fields: [career_id], references: [career_id])
  user users? @relation(fields: [user_id], references: [user_id])
  @@id([user_id])
}

model user_certificates {
  user_cert_id Int
  user_id Int
  date_obtained DateTime @db.Date
  cert_id Int
  user users? @relation(fields: [user_id], references: [user_id])
  certificate certificates? @relation(fields: [cert_id], references: [cert_id])
  @@id([user_cert_id])
}

model user_courses {
  id Int
  user_id Int
  course_id Int
  enrollment_date DateTime @db.Date
  completion_status String
  user users? @relation(fields: [user_id], references: [user_id])
  course courses? @relation(fields: [course_id], references: [course_id])
  @@id([id])
}

model user_external_courses {
  user_external_course_id Int
  user_id Int
  external_course_completion_date DateTime @db.Date
  external_course_id Int
  user users? @relation(fields: [user_id], references: [user_id])
  external_courses external_courses? @relation(fields: [external_course_id], references: [external_course_id])
  @@id([user_external_course_id])
}

model user_skill {
  user_id Int
  skill_id Int
  proficiency_score Float
  last_updated DateTime
  data_source String
  user users? @relation(fields: [user_id], references: [user_id])
  skill skill_competencies? @relation(fields: [skill_id], references: [skill_id])
  @@id([user_id, skill_id])
}

model users {
  password_hash String
  created_at DateTime
  updated_at DateTime
  user_id Int
  user_name String
  user_email String
  user_certificates user_certificates[]
  users_specialization users_specialization[]
  user_career_paths user_career_paths[]
  user_external_courses user_external_courses[]
  reviewsAuthored peer_reviews[] @relation(name: "PeerReviewsReviewer")
  reviewsReceived peer_reviews[] @relation(name: "PeerReviewsReviewee")
  ai_insights ai_insights[]
  study_plans study_plans[]
  community_posts community_posts[] @relation("PostAuthor")
  user_courses user_courses[]
  user_skill user_skill[]
  projects projects[]
  recommended_certificate recommended_certificate[]
  recommended_courses recommended_courses[]
  recommended_external_courses recommended_external_courses[]
  recommended_projects recommended_projects[]
  @@id([user_id])
}

model users_specialization {
  user_id Int
  spec_id Int
  added_date DateTime
  user users? @relation(fields: [user_id], references: [user_id])
  specialization specialization? @relation(fields: [spec_id], references: [spec_id])
  @@id([user_id, spec_id])
}

model recommended_certificate {
  id Int
  user_id Int
  cert_id Int
  reason String
  user users? @relation(fields: [user_id], references: [user_id])
  certificate certificates? @relation(fields: [cert_id], references: [cert_id])
  @@id([id])
}

model recommended_courses {
  re_course_id Int
  user_id Int
  course_id Int
  reason String
  user users? @relation(fields: [user_id], references: [user_id])
  course courses? @relation(fields: [course_id], references: [course_id])
  @@id([re_course_id])
}

model recommended_external_courses {
  id Int
  user_id Int
  external_course_id Int
  reason String
  user users? @relation(fields: [user_id], references: [user_id])
  external_courses external_courses? @relation(fields: [external_course_id], references: [external_course_id])
  @@id([id])
}

model recommended_projects {
  id Int
  user_id Int
  project_id Int
  reason String
  user users? @relation(fields: [user_id], references: [user_id])
  project projects? @relation(fields: [project_id], references: [project_id])
  @@id([id])
}