import OpenAI from 'openai'
import { PrismaClient } from '@prisma/client'
import { faker } from '@faker-js/faker'
import { writeFileSync } from 'fs'
import path from 'path'
import dotenv from 'dotenv'

dotenv.config()

const prisma = new PrismaClient()
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Real seeded users (students)
const studentUsers = [
  { id: 2, name: "Bob Chen" },
  { id: 3, name: "Carol Martinez" },
  { id: 4, name: "David Kim" },
  { id: 5, name: "Eva Singh" }
]

// Course data
const courses = [
  {
    course_id: 1,
    course_code: "50.004",
    course_name: "Introduction to Algorithms",
    professor: "Ernest Chong",
    short_desc: "Algorithm design, analysis, and data structures."
  },
  {
    course_id: 2,
    course_code: "50.007",
    course_name: "Machine Learning",
    professor: "Lu Wei",
    short_desc: "Supervised and unsupervised learning algorithms."
  }
]

interface CourseReview {
  review_id: number
  course_id: number
  user_id: number
  professor_name: string
  term: string
  year: number
  course_rating: number
  professor_rating: number
  difficulty: number
  workload: number
  usefulness: number
  clarity: number
  helpfulness: number
  engagement: number
  detailed_review: string
  created_at: Date
}

async function generateReview(course: any, reviewer: any, index: number): Promise<CourseReview> {
  const year = 2025
  const term = faker.helpers.arrayElement(["Term 4", "Term 5", "Term 6"])

  const courseRating = faker.number.int({ min: 3, max: 5 })
  const professorRating = faker.number.int({ min: 3, max: 5 })
  const difficulty = faker.number.int({ min: 2, max: 5 })
  const workload = faker.number.int({ min: 2, max: 5 })
  const usefulness = faker.number.int({ min: 3, max: 5 })
  const clarity = faker.number.int({ min: 3, max: 5 })
  const helpfulness = faker.number.int({ min: 3, max: 5 })
  const engagement = faker.number.int({ min: 3, max: 5 })

  const reviewPrompt = `
  Write a detailed course review for "${course.course_name}" taught by Professor ${course.professor}.
  Reviewer: ${reviewer.name}, an undergraduate Computer Science and Design student at SUTD.
  The review should include opinions about:
  - Course structure, assignments, and exams
  - Teaching style and clarity
  - Practical usefulness and workload
  - Advice for future students

  The tone should sound like a real student, balanced (not overly positive or negative), and under 1000 characters.
  `

  const response = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: reviewPrompt }],
    max_tokens: 300,
    temperature: 0.8,
  })

  const detailed_review = response.choices[0]?.message?.content?.trim() || faker.lorem.paragraph(3)

  return {
    review_id: index,
    course_id: course.course_id,
    user_id: reviewer.id,
    professor_name: course.professor,
    term,
    year,
    course_rating: courseRating,
    professor_rating: professorRating,
    difficulty,
    workload,
    usefulness,
    clarity,
    helpfulness,
    engagement,
    detailed_review,
    created_at: faker.date.recent({ days: 60 })
  }
}

async function generateAllReviews() {
  const allReviews: CourseReview[] = []
  let reviewCounter = 1

  for (const course of courses) {
    console.log(`\nüìò Generating reviews for ${course.course_name}...`)

    for (let i = 0; i < 10; i++) {
      const reviewer = faker.helpers.arrayElement(studentUsers)
      try {
        const review = await generateReview(course, reviewer, reviewCounter++)
        allReviews.push(review)
        console.log(`‚úÖ Review ${i + 1}/10 generated by ${reviewer.name}`)
        await new Promise(resolve => setTimeout(resolve, 1200)) // gentle rate limit
      } catch (err) {
        console.error(`‚ùå Error generating review ${i + 1} for ${course.course_name}:`, err)
      }
    }
  }

  return allReviews
}

async function main() {
  try {
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå Missing OPENAI_API_KEY in .env file')
      process.exit(1)
    }

    const reviews = await generateAllReviews()
    const filePath = path.join(__dirname, '../prisma/data/generated_course_reviews.json')
    writeFileSync(filePath, JSON.stringify(reviews, null, 2))
    console.log(`\nüíæ Saved ${reviews.length} course reviews to ${filePath}`)
  } catch (error) {
    console.error('‚ùå Error in main process:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) main()
