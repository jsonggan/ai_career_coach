generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_insights {
  insight_id              Int      @id
  user_id                 Int
  generated_on            DateTime
  recommendation          String
  spec_additional_comment String
  user                    users    @relation(fields: [user_id], references: [user_id])
}

model career_paths {
  career_id Int @id
  career_title String
  career_desc String
  icon String?
  user_career_paths user_career_paths[]
}

model certificates {
  cert_id                 Int                       @id
  cert_name               String
  cert_provider           String
  cert_level              String
  cert_category           String
  is_added_by_user        Boolean                   @default(false)
  recommended_certificate recommended_certificate[]
  study_plan_certificate study_plan_certificate[]
  user_certificates       user_certificates[]
}

model community_posts {
  post_id       Int      @id
  user_id       Int
  posted_on     DateTime
  post_content  String
  course_rating Int
  user          users    @relation("PostAuthor", fields: [user_id], references: [user_id])
}

model external_courses {
  external_course_id Int @id
  external_course_name String
  external_provider String
  external_course_desc String
  external_course_link String?
  external_ai_tagged_skill String
  is_added_by_user Boolean @default(false) 
  user_external_courses user_external_courses[]
  recommended_external_courses recommended_external_courses[]
  study_plan_external_courses  study_plan_external_courses[]
}

model courses {
  course_id           Int                   @id
  course_code         String
  course_name         String
  course_desc         String
  course_full_desc    String
  ai_tagged_skill     String
  course_link         String?
  recommended_courses recommended_courses[]
  study_plan_courses  study_plan_courses[]
  user_courses        user_courses[]
}

model job_description {
  job_id          Int    @id
  job_url         String
  job_title       String
  job_description String
  job_hard_skills String
  job_soft_skills String
}

model linkedin_benchmark {
  id              Int    @id
  skill_name      String
  avg_skill_score Float
  percentile_75   Float
  percentile_90   Float
  sample_size     Int
}

model peer_reviews {
  review_date                   DateTime
  review_id                     Int      @id @default(autoincrement())
  reviewer_id                   Int
  reviewee_id                   Int
  academic_performance_rating   Int
  additional_comments           String?
  areas_for_improvement         String
  collaboration_teamwork_rating Int
  strengths_feedback            String
  reviewee                      users    @relation("PeerReviewsReviewee", fields: [reviewee_id], references: [user_id])
  reviewer                      users    @relation("PeerReviewsReviewer", fields: [reviewer_id], references: [user_id])
}

model projects {
  project_id           Int                    @id
  project_title        String
  project_desc         String
  difficulty_level     String
  estimated_time       String
  recommended_projects recommended_projects[]
  study_plan_projects  study_plan_projects[]
  users                users[]                @relation("projectsTousers")
}

model skill_competencies {
  skill_id       Int          @id
  skill_name     String
  skill_grade    String
  skill_category String
  user_skill     user_skill[]
}

model specialization {
  spec_id Int @id
  spec_name String
  spec_desc String
  icon String?
  users_specialization users_specialization[]
}

model study_plan_certificate {
  id          Int          @id
  plan_id     Int
  cert_id     Int
  certificate certificates @relation(fields: [cert_id], references: [cert_id])
  study_plans study_plans  @relation(fields: [plan_id], references: [plan_id])
}

model study_plan_courses {
  id          Int         @id
  plan_id     Int
  course_id   Int
  course      courses     @relation(fields: [course_id], references: [course_id])
  study_plans study_plans @relation(fields: [plan_id], references: [plan_id])
}

model study_plan_external_courses {
  id                 Int              @id
  plan_id            Int
  external_course_id Int
  external_courses   external_courses @relation(fields: [external_course_id], references: [external_course_id])
  study_plans        study_plans      @relation(fields: [plan_id], references: [plan_id])
}

model study_plan_projects {
  plan_id     Int         @id
  project_id  Int
  id          Int
  study_plans study_plans @relation(fields: [plan_id], references: [plan_id])
  project     projects    @relation(fields: [project_id], references: [project_id])
}

model study_plans {
  plan_id                     Int                           @id
  user_id                     Int
  plan_name                   String
  plan_desc                   String
  created_at                  DateTime
  updated_at                  DateTime
  study_plan_certificate      study_plan_certificate[]
  study_plan_courses          study_plan_courses[]
  study_plan_external_courses study_plan_external_courses[]
  study_plan_projects         study_plan_projects?
  user                        users                         @relation(fields: [user_id], references: [user_id])
}

model user_career_paths {
  user_id Int
  career_id Int
  career_path career_paths @relation(fields: [career_id], references: [career_id])
  user users @relation(fields: [user_id], references: [user_id])
  @@id([user_id, career_id])
}

model user_certificates {
  user_cert_id  Int          @id
  user_id       Int
  date_obtained DateTime     @db.Date
  cert_id       Int
  certificate   certificates @relation(fields: [cert_id], references: [cert_id])
  user          users        @relation(fields: [user_id], references: [user_id])
}

model user_courses {
  id                Int      @id
  user_id           Int
  course_id         Int
  enrollment_date   DateTime @db.Date
  completion_status String
  course            courses  @relation(fields: [course_id], references: [course_id])
  user              users    @relation(fields: [user_id], references: [user_id])
}

model user_external_courses {
  user_external_course_id         Int              @id
  user_id                         Int
  external_course_completion_date DateTime         @db.Date
  external_course_id              Int
  external_courses                external_courses @relation(fields: [external_course_id], references: [external_course_id])
  user                            users            @relation(fields: [user_id], references: [user_id])
}

model user_skill {
  user_id           Int
  skill_id          Int
  proficiency_score Float
  last_updated      DateTime
  data_source       String
  skill             skill_competencies @relation(fields: [skill_id], references: [skill_id])
  user              users              @relation(fields: [user_id], references: [user_id])

  @@id([user_id, skill_id])
}

model users {
  password_hash                String
  created_at                   DateTime
  updated_at                   DateTime
  user_id                      Int                            @id
  user_name                    String
  user_email                   String
  ai_insights                  ai_insights[]
  community_posts              community_posts[]              @relation("PostAuthor")
  reviewsReceived              peer_reviews[]                 @relation("PeerReviewsReviewee")
  reviewsAuthored              peer_reviews[]                 @relation("PeerReviewsReviewer")
  recommended_certificate      recommended_certificate[]
  recommended_courses          recommended_courses[]
  recommended_external_courses recommended_external_courses[]
  recommended_projects         recommended_projects[]
  study_plans                  study_plans[]
  user_career_paths            user_career_paths[]
  user_certificates            user_certificates[]
  user_courses                 user_courses[]
  user_external_courses        user_external_courses[]
  user_skill                   user_skill[]
  users_specialization         users_specialization[]
  projects                     projects[]                     @relation("projectsTousers")
}

model users_specialization {
  user_id        Int
  spec_id        Int
  added_date     DateTime
  specialization specialization @relation(fields: [spec_id], references: [spec_id])
  user           users          @relation(fields: [user_id], references: [user_id])

  @@id([user_id, spec_id])
}

model recommended_certificate {
  id          Int          @id
  user_id     Int
  cert_id     Int
  reason      String
  certificate certificates @relation(fields: [cert_id], references: [cert_id])
  user        users        @relation(fields: [user_id], references: [user_id])
}

model recommended_courses {
  re_course_id Int     @id
  user_id      Int
  course_id    Int
  reason       String
  course       courses @relation(fields: [course_id], references: [course_id])
  user         users   @relation(fields: [user_id], references: [user_id])
}

model recommended_external_courses {
  id                 Int              @id
  user_id            Int
  external_course_id Int
  reason             String
  external_courses   external_courses @relation(fields: [external_course_id], references: [external_course_id])
  user               users            @relation(fields: [user_id], references: [user_id])
}

model recommended_projects {
  id         Int      @id
  user_id    Int
  project_id Int
  reason     String
  project    projects @relation(fields: [project_id], references: [project_id])
  user       users    @relation(fields: [user_id], references: [user_id])
}
